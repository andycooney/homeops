---
- name: Check if cluster is installed
  ansible.builtin.stat:
    path: "/etc/rancher/k3s/config.yaml"
  register: k3s_check_installed
  check_mode: false

- name: Set manifest facts
  ansible.builtin.set_fact:
    k3s_server_manifests_templates: []
    k3s_server_manifests_urls: []
  when: k3s_check_installed.stat.exists

- name: Install Kubernetes
  include_role:
    name: xanmanning.k3s
    public: true

- name: Copy kubeconfig locally to /tmp
  run_once: true
  ansible.builtin.fetch:
    src: "/etc/rancher/k3s/k3s.yaml"
    dest: "/tmp/kubeconfig"
    flat: true
  when:
    - k3s_control_node is defined
    - k3s_control_node

- name: Update kubeconfig with the right IPv4 address
  delegate_to: localhost
  become: false
  run_once: true
  ansible.builtin.replace:
    path: "/tmp/kubeconfig"
    regexp: "https://127.0.0.1:6443"
    replace: "https://{{ k3s_registration_address }}:6443"

- name: Remove deployed manifest templates
  ansible.builtin.file:
    path: "{{ k3s_server_manifests_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
    state: absent
  loop: "{{ k3s_server_manifests_templates }}"
  when:
    - k3s_server_manifests_templates
    - k3s_server_manifests_templates | length > 0

- name: Remove deployed manifest urls
  ansible.builtin.file:
    path: "{{ k3s_server_manifests_dir }}/{{ item.filename }}"
    state: absent
  loop: "{{ k3s_server_manifests_urls }}"
  when:
    - k3s_server_manifests_urls
    - k3s_server_manifests_urls | length > 0

- name: Generate kubeconfig for home-dns on k8s-0
  block:
    - name: Fetch service account for home-dns
      ansible.builtin.set_fact:
        DNSServiceAccountRaw: "{{ lookup('community.kubernetes.k8s', namespace='kube-system', kind='ServiceAccount', resource_name='home-dns') }}"

    - name: Extract service account token from service account
      ansible.builtin.set_fact:
        DNSServiceAccountToken: "{{ DNSServiceAccountRaw | json_query('secrets[*].name | [0]') }}"

    - name: Fetch CA
      ansible.builtin.set_fact:
        DNSCertificateAuthorityRaw: "{{ lookup('community.kubernetes.k8s', namespace='kube-system', kind='Secret', resource_name=DNSServiceAccountToken) }}"

    - name: Extract CA Cert from CA
      ansible.builtin.set_fact:
        DNSCertificateAuthority: '{{ DNSCertificateAuthorityRaw | json_query(''data."ca.crt"'') }}'

    - name: Extract CA Token from CA
      ansible.builtin.set_fact:
        DNSCertificateAuthorityToken: "{{ DNSCertificateAuthorityRaw | json_query('data.token') | b64decode }}"

    - name: Create kubeconfig
      ansible.builtin.copy:
        dest: "/tmp/kubeconfig-homedns"
        content: |
          ---
          apiVersion: v1
          kind: Config
          clusters:
          - name: home
            cluster:
              certificate-authority-data: "{{ DNSCertificateAuthority }}"
              server: "https://{{ k3s_registration_address }}:6443"
          contexts:
          - name: home
            context:
              cluster: home
              user: home-dns
          users:
          - name: home-dns
            user:
              token: {{ DNSCertificateAuthorityToken }}
          current-context: home
        mode: 0755

    - name: Copy kubeconfig to /tmp
      ansible.builtin.fetch:
        src: "/tmp/kubeconfig-homedns"
        dest: "/tmp/kubeconfig-homedns"
        flat: true
  when: "'k8s-0' in inventory_hostname"
