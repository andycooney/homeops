---

name: ansible-tests

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - 'ansible/**'
  pull_request:
    paths:
    - 'ansible/inventory/e2e/**/*.yml'
    - 'ansible/playbooks/**/*.yml'
    - 'ansible/roles/**/*.yml'
    - 'ansible/tests/**'
    - 'ansible/requirements.yml'

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  ANSIBLE_HOST_KEY_CHECKING: "False"

# defaults:
#   run:
#     working-directory: ./ansible/tests

jobs:
  cloud-resources:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install yq
      run: |
        curl -sLO "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        sudo mv yq_linux_amd64 /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        yq --version

    - name: Install Pulumi
      run: |
        curl -fsSL https://get.pulumi.com | sh
        sudo mv /home/runner/.pulumi/bin/pulumi /usr/local/bin
        pulumi version

    - name: Cache node modules
      id: node_modules_cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ./ansible/tests/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install npm deps
      working-directory: ./ansible/tests
      run: npm install
      if: steps.node_modules_cache.outputs.cache-hit != 'true'

    - name: Change Pulumi stack
      working-directory: ./ansible/tests
      run: pulumi stack select ubuntu-2010

    - name: Create cloud resources
      working-directory: ./ansible/tests
      run: pulumi up --yes

    - name: Save Ansible inventory
      working-directory: ./ansible/tests
      run: pulumi stack output --json | yq eval -P - > /tmp/hosts.yml

    - name: Upload Ansible inventory
      uses: actions/upload-artifact@v2
      with:
        name: hosts
        path: /tmp/hosts.yml

  playbooks:
    needs:
    - cloud-resources
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install yq
      run: |
        curl -sLO "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        sudo mv yq_linux_amd64 /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        yq --version

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Upgrade pip and display Python and PIP versions
      run: |
        sudo apt-get update
        sudo apt-get install -y python*-wheel python*-yaml
        python3 -m pip install --no-cache-dir --upgrade pip
        python3 -V
        pip --version

    - name: Upgrade Ansible
      run: |
        python3 -m pip install --no-cache-dir --force-reinstall --upgrade 'ansible>=3.0.0'
        ansible --version

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.5.0
      with:
        ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

    - name: Install Ansible Galaxy roles
      working-directory: ./ansible
      run: ansible-galaxy install -r requirements.yml --force

    - name: Download Ansible inventory
      uses: actions/download-artifact@v2
      with:
        name: hosts
        path: ./ansible/inventory/e2e/hosts.yml

    - name: Waiting for all hosts to become ready
      uses: nick-invision/retry@v2
      with:
        timeout_seconds: 30
        max_attempts: 10
        retry_on: error
        command: ansible all -i ./ansible/inventory/e2e/hosts.yml --one-line -m ping

    - name: Run ubuntu/upgrade playbook
      working-directory: ./ansible
      run: ansible-playbook -i ./inventory/e2e/hosts.yml ./playbooks/ubuntu/upgrade.yml

    - name: Reboot all nodes
      working-directory: ./ansible
      run: ansible all -i ./inventory/e2e/hosts.yml --one-line -m reboot

    - name: Run ubuntu/prepare playbook
      working-directory: ./ansible
      run: ansible-playbook -i ./inventory/e2e/hosts.yml ./playbooks/ubuntu/prepare.yml

    - name: Reboot all nodes
      working-directory: ./ansible
      run: ansible all -i ./inventory/e2e/hosts.yml --one-line -m reboot

    - name: Run k3s/install playbook
      working-directory: ./ansible
      run: ansible-playbook -i ./inventory/e2e/hosts.yml ./playbooks/k3s/install.yml

    - name: Upload kubeconfig
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: /tmp/kubeconfig

  deploy-nginx:
    needs:
    - cloud-resources
    - playbooks
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install yq
      run: |
        curl -sLO "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
        sudo mv yq_linux_amd64 /usr/local/bin/yq
        chmod +x /usr/local/bin/yq
        yq --version

    - name: Install kubectl
      run: |
        curl -sLO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo mv kubectl /usr/local/bin/kubectl
        chmod +x /usr/local/bin/kubectl
        kubectl version --client

    - name: Download Ansible inventory
      uses: actions/download-artifact@v2
      with:
        name: hosts
        path: ./ansible/inventory/e2e/hosts.yml

    - name: Download kubeconfig
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
        path: /tmp/kubeconfig

    - name: Get HTTP Load Balancer IP
      run: |
        IP=$(yq e '.all | .. | select(.digitalocean_http_ip) | .digitalocean_http_ip' hosts.yml | head -n 1)
        echo ::set-output name=ip::${IP}

    - name: Run kubectl
      run: |
        kubectl --kubeconfig /tmp/kubeconfig get nodes -o wide

  cleanup:
    needs:
    - cloud-resources
    - playbooks
    - deploy-nginx
    if: always()
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Pulumi
      run: |
        curl -fsSL https://get.pulumi.com | sh
        sudo mv /home/runner/.pulumi/bin/pulumi /usr/local/bin
        pulumi version

    - name: Cache node modules
      id: node_modules_cache
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ./ansible/tests/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install npm deps
      working-directory: ./ansible/tests
      run: npm install
      if: steps.node_modules_cache.outputs.cache-hit != 'true'

    - name: Change Pulumi stack
      working-directory: ./ansible/tests
      run: pulumi stack select ubuntu-2010

    - name: Destroy cloud resources
      working-directory: ./ansible/tests
      run: pulumi destroy --yes
