---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: prometheus-operator
  namespace: monitoring
  annotations:
    fluxcd.io/ignore: "false"
    fluxcd.io/automated: "true"
    fluxcd.io/tag.grafana: semver:~7
spec:
  releaseName: prometheus-operator
  chart:
    repository: https://kubernetes-charts.storage.googleapis.com/
    name: prometheus-operator
    version: 9.2.2
  values:
    defaultRules:
      rules:
        kubeApiserverAvailability: true
        kubeApiserver: true
    server:
      resources:
        requests:
          memory: 1000Mi
          cpu: 25m
        limits:
          memory: 2000Mi
    prometheusOperator:
      createCustomResource: false
      prometheusConfigReloaderImage:
        repository: quay.io/coreos/prometheus-config-reloader
        tag: v0.39.0
      configmapReloadImage:
        repository: jimmidyson/configmap-reload
        tag: v0.3.0
    alertmanager:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "internal"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 10Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
    grafana:
      image:
        repository: grafana/grafana
        tag: 7.1.3
      deploymentStrategy:
        type: Recreate
      persistence:
        enabled: false
        storageClassName: "longhorn"
        size: 10Gi
        accessModes:
        - ReadWriteOnce
      # extraContainers: |
      #   - name: renderer
      #     image: grafana/grafana-image-renderer:latest        
      env:
        GF_EXPLORE_ENABLED: true
        GF_PANELS_DISABLE_SANITIZE_HTML: true
        # GF_RENDERING_SERVER_URL: http://localhost:8081/render
        # GF_RENDERING_CALLBACK_URL: http://localhost:3000/
        GF_LOG_FILTERS: rendering:debug
        VAR_BLOCKY_URL: "http://blocky.kube-system.svc.cluster.local:4000"
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "nginx"
      sidecar:
        datasources:
          enabled: true
          defaultDatasourceEnabled: false
        dashboards:
          enabled: true
          searchNamespace: ALL        
          provider:
            disableDelete: false
            allowUiUpdates: true
      plugins:
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            allowUiUpdates: true
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          vernemq:
            url: https://raw.githubusercontent.com/vernemq/vernemq/master/metrics_scripts/grafana/VerneMQ%20Node%20Metrics.json
            datasource: Prometheus
          nginx-dashboard:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          blocky:
            url: https://raw.githubusercontent.com/0xERR0R/blocky/master/docs/blocky-grafana.json
            datasource: Prometheus
          apc-ups:
            url: https://raw.githubusercontent.com/onedr0p/k3s-gitops/master/integrations/dashboards/apc-ups.json
            datasource: Prometheus
          cyberpower-pdu:
            url: https://raw.githubusercontent.com/onedr0p/k3s-gitops/master/integrations/dashboards/cyberpower-pdu.json
            datasource: Prometheus
          flux:
            url: https://raw.githubusercontent.com/fluxcd/flux/master/chart/flux/dashboards/flux-dashboard.json
            datasource: Prometheus
          helm-operator:
            url: https://raw.githubusercontent.com/fluxcd/helm-operator/master/chart/helm-operator/dashboards/helm-operator-dashboard.json
            datasource: Prometheus
      additionalDataSources:
      # - name: Prometheus
      #   type: prometheus
      #   access: proxy
      #   url: http://thanos-query-http:10902/
      #   isDefault: true
      - name: loki
        type: loki
        access: proxy
        url: http://loki.logging.svc.cluster.local:3100
      - name: home_assistant
        type: influxdb
        access: proxy
        url: http://influxdb:8086
        database: home_assistant
      grafana.ini:
        paths:
          data: /var/lib/grafana/data
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        analytics:
          check_for_updates: true
        log:
          mode: console
        grafana_net:
          url: https://grafana.net
    kubeEtcd:
      enabled: false
    kubeControllerManager:
      enabled: false
#       endpoints:
#       - 192.168.42.11
    kubeScheduler:
      enabled: false
#       endpoints:
#       - 192.168.42.11
    kubeProxy:
      enabled: false
    kubelet:
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance
    prometheus:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: "internal"
      prometheusSpec:
        # replicas: 2
        # replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 60d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 50Gi
        additionalScrapeConfigs:
        - job_name: 'windows-exporter'
          metrics_path: '/metrics'
          params:
            format: [prometheus]
          honor_labels: true
          static_configs:
          - targets:
            - 192.168.1.18:9182
        - job_name: 'node-exporter'
          static_configs:
          - targets:
            - 192.168.1.39:9100
            - 192.168.1.40:9100
        - job_name: 'minio'
          metrics_path: /minio/prometheus/metrics
          static_configs:
          - targets:
            - 192.168.1.39:9000
        # thanos:
        #   image: quay.io/thanos/thanos:v0.13.0
        #   version: v0.13.0
        #   objectStorageConfig:
        #     name: thanos
        #     key: object-store.yaml
  valueFileSecrets:
  - name: "prometheus-operator-helm-values"
