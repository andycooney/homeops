---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  apply-config:
    desc: Apply Talos configuration to a node
    cmd: >
      sops exec-file {{.CLUSTER_DIR}}/bootstrap/talos/assets/{{.HOSTNAME}}.secret.sops.yaml "minijinja-cli --env --trim-blocks --lstrip-blocks --autoescape=none {}"
      | talosctl apply-config --mode={{.MODE}} --nodes {{.HOSTNAME}} --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "no-reboot"}}'
    env:
      KUBERNETES_VERSION:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath="{.status.nodeInfo.kubeletVersion}"
      TALOS_VERSION:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.labels.feature\.node\.kubernetes\.io/system-os_release\.VERSION_ID}'
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/assets/{{.HOSTNAME}}.secret.sops.yaml
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - kubectl cnpg maintenance set --reusePVC --all-namespaces
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer/{{.SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - until kubectl wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
      - kubectl cnpg maintenance unset --reusePVC --all-namespaces
    vars:
      SCHEMATIC_ID:
        sh: talosctl get nodeannotationspecs --nodes {{.NODE}} -o jsonpath='{.spec.value}'
    requires:
      vars: [CLUSTER, HOSTNAME, VERSION]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - kubectl cnpg &>/dev/null
      - >
        curl -fsSL -H "Authorization: Bearer $(curl -fsSL 'https://ghcr.io/token?scope=repository:siderolabs/talos:pull' | jq -r '.token')"
        https://ghcr.io/v2/siderolabs/talos/manifests/{{.VERSION}} &>/dev/null

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.CONTROLLER}} upgrade-k8s --to {{.VERSION}}
    vars:
      CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER, VERSION]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.CONTROLLER}} get machineconfig &>/dev/null
      - >
        curl -fsSL -H "Authorization: Bearer $(curl -fsSL 'https://ghcr.io/token?scope=repository:siderolabs/kubelet:pull' | jq -r '.token')"
        https://ghcr.io/v2/siderolabs/kubelet/manifests/{{.VERSION}} &>/dev/null

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.HOSTNAME}}' node on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: [CLUSTER, HOSTNAME]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.NODES}} get machineconfig &>/dev/null
