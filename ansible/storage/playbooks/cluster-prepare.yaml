---
# TODO: Add bonding to /etc/modules-load.d/modules.conf
# TODO: Add netplan config for bond0
- name: Cluster Prepare
  hosts: all
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 2 seconds...
      ansible.builtin.pause:
        seconds: 2
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "{{ timezone | default('Etc/UTC') }}"

    - name: Packages
      block:
        - name: Packages | Add fish repository
          ansible.builtin.apt_repository:
            repo: ppa:fish-shell/release-3
            update_cache: true
        - name: Packages | Install
          ansible.builtin.apt:
            name: apt-transport-https,ca-certificates,containernetworking-plugins,curl,ffmpeg,
              figlet,fish,fzf,gettext,git,htop,ifenslave,iputils-ping,net-tools,lolcat,mailutils,
              msmtp,msmtp-mta,nano,neofetch,ntpdate,podman,psmisc,rclone,software-properties-common,
              tmux,tree,uidmap,unzip,zfs-zed,zfsutils-linux,dmraid,gdisk,hdparm,lvm2,nfs-common,
              nfs-kernel-server,nvme-cli,open-iscsi,samba,smartmontools,socat
            install_recommends: false
        - name: Packages | Remove
          ansible.builtin.apt:
            name: apparmor,ufw,unattended-upgrades
            state: absent
            autoremove: true

    - name: User Configuration
      block:
        - name: User Configuration | Create group
          ansible.builtin.group:
            gid: "{{ create_group.id }}"
            name: "{{ create_group.name }}"
            state: present
        - name: User Configuration | Create user
          ansible.builtin.user:
            uid: "{{ create_user.id }}"
            name: "{{ create_user.name }}"
            shell: /usr/bin/fish
            group: "{{ create_group.name }}"
            groups: "{{ create_user.additional_groups }}"
            append: true
        - name: User Configuration | Add user to sudoers
          when: ansible_user != 'root'
          ansible.builtin.copy:
            content: "{{ create_user.name }} ALL=(ALL:ALL) NOPASSWD:ALL"
            dest: "/etc/sudoers.d/{{ create_user.name }}"
            owner: root
            group: root
            mode: "0440"
        - name: User Configuration | SSH keys
          ansible.posix.authorized_key:
            user: "{{ create_user.name }}"
            key: "https://github.com/{{ github_username }}.keys"
        - name: User Configuration | Silence login
          ansible.builtin.file:
            dest: "/home/{{ create_user.name }}/.hushlogin"
            state: touch
            owner: "{{ create_user.name }}"
            group: "{{ create_user.name }}"
            mode: "0775"
            modification_time: preserve
            access_time: preserve
        - name: User Configuration | Fish shell
          ansible.builtin.user:
            name: "{{ create_user.name }}"
            shell: /usr/bin/fish

    - name: Network Configuration
      block:
        - name: Network Configuration | Set hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Network Configuration | Update hosts
          ansible.builtin.copy:
            dest: /etc/hosts
            content: |
              127.0.0.1 localhost
              127.0.1.1 {{ inventory_hostname }}

              # The following lines are desirable for IPv6 capable hosts
              ::1     localhost ip6-localhost ip6-loopback
              ff02::1 ip6-allnodes
              ff02::2 ip6-allrouters
            mode: preserve

    - name: NFS Configuration
      block:
        - name: NFS Configuration | Copy /etc/nfs.conf.d/local.conf
          notify: Restart nfs
          ansible.builtin.template:
            src: templates/local.conf.j2
            dest: /etc/nfs.conf.d/local.conf
            owner: root
            group: root
            mode: "0644"

    - name: System Configuration
      block:
        - name: System Configuration | Neofetch
          ansible.builtin.copy:
            dest: /etc/profile.d/neofetch.sh
            mode: "0755"
            content: neofetch --config none
        - name: System Configuration | Disable apparmor
          ansible.builtin.systemd:
            name: apparmor
            state: stopped
            masked: true
        - name: System Configuration | Disable swap
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["swap", "none"]
        - name: System Configuration | Grub (1)
          ansible.builtin.replace:
            path: /etc/default/grub
            regexp: '^(GRUB_CMDLINE_LINUX=(?:(?![" ]{{ item.key | regex_escape }}=).)*)(?:[" ]{{ item.key | regex_escape }}=\S+)?(.*")$'
            replace: '\1 {{ item.key }}={{ item.value }}\2'
          with_dict: "{{ grub_config }}"
          vars:
            grub_config:
              apparmor: "0"
              mitigations: "off"
          register: grub_status
        - name: System Configuration | Grub (2) # noqa: no-changed-when no-handler
          ansible.builtin.command: update-grub
          when: grub_status.changed

    - name: Notification Configuration
      block:
        - name: Notification Configuration | Copy /etc/aliases
          notify: Restart msmtpd
          ansible.builtin.template:
            src: templates/aliases.j2
            dest: /etc/aliases
            owner: root
            group: root
            mode: "0644"
        - name: Notification Configuration | Copy /etc/msmtprc
          notify: Restart msmtpd
          ansible.builtin.template:
            src: templates/msmtprc.j2
            dest: /etc/msmtprc
            owner: root
            group: root
            mode: "0644"
        - name: Notification Configuration | Copy /etc/smartd.conf
          notify: Restart smartd
          ansible.builtin.template:
            src: templates/smartd.conf.j2
            dest: /etc/smartd.conf
            owner: root
            group: root
            mode: "0644"
        - name: Notification Configuration | Copy /etc/zfs/zed.d/zed.rc
          notify: Restart zed
          ansible.builtin.template:
            src: templates/zed.rc.j2
            dest: /etc/zfs/zed.d/zed.rc
            owner: root
            group: root
            mode: "0644"

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
        msg: Rebooting nodes
        reboot_timeout: 3600
    - name: Restart msmtpd
      ansible.builtin.service:
        name: msmtpd.service
        enabled: true
        state: restarted
    - name: Restart nfs
      ansible.builtin.service:
        name: nfs-kernel-server.service
        enabled: true
        state: restarted
    - name: Restart smartd
      ansible.builtin.service:
        name: smartd.service
        enabled: true
        state: restarted
    - name: Restart zed
      ansible.builtin.service:
        name: zed.service
        enabled: true
        state: restarted
