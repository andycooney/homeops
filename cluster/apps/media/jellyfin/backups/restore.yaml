---
apiVersion: batch/v1
kind: Job
metadata:
  name: &name jellyfin-restore
  namespace: media
spec:
  ttlSecondsAfterFinished: 86400
  template:
    metadata:
      labels:
        application-name: jellyfin
        controller-type: deployment
    spec:
      automountServiceAccountToken: true
      restartPolicy: OnFailure
      containers:
        - name: backup
          image: ghcr.io/onedr0p/kopia:0.11.3@sha256:2ae9ede0edac68c09d517abd71fa12c96efcf19f27ce7ffca968cebb10ed0e2d
          env:
            - name: KOPIA_PASSWORD
              value: *name
            - name: KOPIA_CACHE_DIRECTORY
              value: /mnt/backup/cache
            - name: KOPIA_LOG_DIR
              value: /mnt/backup/logs
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_APPLICATION_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['application-name']
            - name: POD_CONTROLLER_TYPE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['controller-type']
          command:
            - /bin/bash
            - -c
            - |-
              flux -n ${POD_NAMESPACE} suspend helmrelease ${POD_APPLICATION_NAME}
              kubectl -n ${POD_NAMESPACE} scale ${POD_CONTROLLER_TYPE} ${POD_APPLICATION_NAME} --replicas 0
              kopia repository connect filesystem --path=/mnt/backup/repo --override-hostname=cluster --override-username=cronjob
              rm -rf /mnt/config/{*,.*}
              latest_snapshot_id=$(kopia snapshot list --json | jq --raw-output '.[0] | .id')
              kopia snapshot restore ${latest_snapshot_id} /mnt/config
              flux -n ${POD_NAMESPACE} resume helmrelease ${POD_APPLICATION_NAME}
          volumeMounts:
            - name: config
              mountPath: /mnt/config
            - name: backup
              mountPath: /mnt/backup
          securityContext:
            privileged: true
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: jellyfin-config-v1
        - name: backup
          nfs:
            server: "expanse.${SECRET_PRIVATE_DOMAIN}"
            path: /tycho/Apps/External/Backups/jellyfin
