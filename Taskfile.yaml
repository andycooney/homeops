---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  PYTHON_BIN: python3
  CLUSTER_DIR: "{{.ROOT_DIR}}/kubernetes"
  ANSIBLE_DIR: "{{.ROOT_DIR}}/ansible"
  CLUSTER_SECRETS_FILE: "{{.CLUSTER_DIR}}/flux/vars/cluster-secrets.sops.env"
  CLUSTER_SETTINGS_FILE: "{{.CLUSTER_DIR}}/flux/vars/cluster-settings.env"

env:
  KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"
  SOPS_AGE_KEY_FILE: "{{.ROOT_DIR}}/age.key"
  PATH: "{{.ROOT_DIR}}/.venv/bin:$PATH"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"
  ANSIBLE_COLLECTIONS_PATH: "{{.ROOT_DIR}}/.venv/galaxy"
  ANSIBLE_ROLES_PATH: "{{.ROOT_DIR}}/.venv/galaxy/ansible_roles"
  ANSIBLE_VARS_ENABLED: "host_group_vars,community.sops.sops"
  K8S_AUTH_KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"

includes:
  volsync: .taskfiles/VolSync/Taskfile.yaml

tasks:

  default:
    silent: true
    cmds: ["task -l"]

  configure-venv:
    desc: Install or upgrade the Python virtual env
    cmds:
      - "{{.PYTHON_BIN}} -m venv {{.ROOT_DIR}}/.venv"
      - .venv/bin/python3 -m pip install --upgrade pip setuptools wheel
      - .venv/bin/python3 -m pip install --upgrade --requirement "{{.ROOT_DIR}}/requirements.txt"
      - .venv/bin/ansible-galaxy install --role-file "{{.ROOT_DIR}}/requirements.yaml" --force

  flux-bootstrap:
    desc: Bootstrap Flux into a cluster
    summary: task {{.TASK}} [cluster=main]
    cmds:
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux
      - sops --decrypt {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/age-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.sops.yaml | kubectl apply -f -
      - sops --decrypt --in-place {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.sops.env
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/{{.cluster}}/flux/config
      - defer: sops --encrypt --in-place {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.sops.env
    vars:
      cluster: '{{ or .cluster (fail "Argument (cluster) is required") }}'
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
      - sh: test -f {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/age-key.sops.yaml
      - sh: test -f {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.sops.yaml
      - sh: test -f {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars/cluster-settings.env
      - sh: test -f {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.sops.env
      - sh: sops --decrypt {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/age-key.sops.yaml
      - sh: sops --decrypt {{.CLUSTER_DIR}}/{{.cluster}}/bootstrap/flux/github-deploy-key.sops.yaml
      - sh: sops --decrypt {{.CLUSTER_DIR}}/{{.cluster}}/flux/vars/cluster-secrets.sops.env

  flux-apply:
    desc: Apply a resource path that contains Flux substitution variables
    summary: task {{.TASK}} ks=./kubernetes/apps/default/plex/app
    dotenv: ['{{.CLUSTER_SETTINGS_FILE}}']
    cmd: |
      sops exec-env {{.CLUSTER_SECRETS_FILE}} \
        "kustomize build --load-restrictor=LoadRestrictionsNone {{.ks}} | \
          envsubst | kubectl apply --server-side --field-manager=kustomize-controller -f -"
    vars:
      ks: '{{ or .ks (fail "Missing path (`ks` var)") }}'
    preconditions:
      - sh: test -f {{.CLUSTER_SECRETS_FILE}}
      - sh: test -f {{.CLUSTER_SETTINGS_FILE}}

  sync-secrets:
    desc: Sync ExternalSecret resources
    summary: task {{.TASK}} [secret=plex] [ns=default]
    cmd: |
      {{if eq .secret ""}}
        kubectl get externalsecret.external-secrets.io --all-namespaces --no-headers -A | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c 'kubectl -n $0 annotate externalsecret.external-secrets.io $1 force-sync=$(date +%s) --overwrite'
      {{else}}
        kubectl -n {{.ns}} annotate externalsecret.external-secrets.io {{.secret}} force-sync=$(date +%s) --overwrite
      {{end}}
    vars:
      secret: '{{ .secret | default ""}}'
      ns: '{{.ns | default "default"}}'
    preconditions:
      - kubectl -n {{.ns}} get externalsecret {{.secret}}

  mount-volume:
    desc: Mount a PersistentVolumeClaim to a temporary pod
    summary: task {{.TASK}} claim=plex [ns=default]
    interactive: true
    cmd: |
      kubectl run -n {{.ns}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "debug",
                "image": "ghcr.io/onedr0p/alpine:rolling",
                "command": ["/bin/bash"],
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "config",
                    "mountPath": "/config"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "config",
                "persistentVolumeClaim": {
                  "claimName": "{{.claim}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    vars:
      claim: '{{ or .claim (fail "Argument (claim) is required") }}'
      ns: '{{.ns | default "default"}}'
    preconditions:
      - kubectl -n {{.ns}} get persistentvolumeclaim {{.claim}}

  "644":
    desc: Workaround for https://github.com/fluxcd/helm-controller/issues/644
    summary: task {{.TASK}} [hr=plex] [ns=default]
    cmds:
      - kubectl -n {{.ns}} delete secret -l owner=helm,name={{.hr}},status=pending-upgrade
      - flux -n {{.ns}} reconcile hr {{.hr}}
    vars:
      hr: '{{ or .hr (fail "Argument (hr) is required") }}'
      ns: '{{.ns | default "default"}}'
    preconditions:
      - flux -n {{.ns}} get helmrelease {{.hr}}
